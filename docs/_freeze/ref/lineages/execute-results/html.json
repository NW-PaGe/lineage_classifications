{
  "hash": "6cc7ad3501ff2c4a96187db263fa11e1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lineages Extract\"\ndescription: Look under the hood of the lineages.R script\ndate: September 1, 2023\ndate-modified: today\nauthor: \n  - name: Frank Aragona\n    email: frank.aragona@doh.wa.gov\n    affiliations:\n      - Washington Department of Health\n      - Data Integration/Quality Assurance\nformat: \n  html:\n    code-fold: show\n    code-overflow: wrap\n    class-output: \"watch\"\n    toc: true\n    number-sections: true\nexecute: \n  eval: true\n  freeze: true\n\n---\n\n\n\n\n\n:::{.note}\n\n{{< bi file-earmark-check-fill size=4em >}} **Summary**\n\n-   Pull lineage data from the CDC\n-   Transform and clean the data\n-   Output to a csv file\n\n:::\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n# Load libraries\n\nThis project uses `pacman::p_load()` to read in libraries. `p_load()` will install any packages that aren't installed in the user's environment.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pacman)\np_load(\n  reticulate,\n  fs,\n  lubridate,\n  dplyr,\n  stringr,\n  magrittr,\n  readr,\n  httr\n)\n```\n:::\n\n\n\n\n# Pull CDC Lineages via API\n\nCDC provides a list of COVID-19 lineages that we will pull into our R environment\n\n1.  Provide the url link to CDC's repo\n2.  Use `httr::GET()` to connect and pull the text\n3.  `httr::content` will pull all text in the html\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# input the url\nurl <- 'https://raw.githubusercontent.com/cov-lineages/pango-designation/master/lineage_notes.txt'\n\n# get the response of the url \ndata <- httr::GET(url)\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{.watch}\nResponse [https://raw.githubusercontent.com/cov-lineages/pango-designation/master/lineage_notes.txt]\n  Date: 2024-04-18 20:49\n  Status: 200\n  Content-Type: text/plain; charset=utf-8\n  Size: 243 kB\nLineage\tDescription \nA\tOne of the two original haplotypes of the pandemic (A and B). Many sequence...\nA.1\tUSA lineage\nA.2\tMostly Spanish lineage now includes South and Central American sequences,...\nA.2.2\tAustralian lineage\nA.2.3\tScottish lineage\nA.2.4\tPanama lineage\nA.2.5\tCentral American/ USA lineage\nA.2.5.1\tCosta Rica lineage, from #33\nA.2.5.2\tPredominantly Italy lineage\n...\n```\n\n\n:::\n\n```{.r .cell-code}\n# extract the content of the response (all the txt you see in the url)\nlineage_content <- httr::content(data, as = \"text\")\nsubstr(lineage_content,1,500)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{.watch}\n[1] \"Lineage\\tDescription \\nA\\tOne of the two original haplotypes of the pandemic (A and B). Many sequences originating from China and many global exports; including to South East Asia Japan South Korea Australia the USA and Europe represented in this lineage\\nA.1\\tUSA lineage\\nA.2\\tMostly Spanish lineage now includes South and Central American sequences, other European countries and Kazakhstan.\\nA.2.2\\tAustralian lineage\\nA.2.3\\tScottish lineage\\nA.2.4\\tPanama lineage\\nA.2.5\\tCentral American/ USA lineage\\nA.2.5.1\\t\"\n```\n\n\n:::\n:::\n\n\n\n\n**Note that the text is not formatted and looks like garbage. We'll clean that up in subsequent steps**\n\n<br>\n\n# Process the data\n\nNow we will process the data so we can clean and wrangle it. Notice how the output above is delimited by `\\n`. We'll use that delimiter to split the string into a list of individual strings and unpack that list into individual rows. Now we can create a matrix with two columns, Lineage and Description\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# split by \"\\n\" to get a list by row, unlist\nlineages_string_by_row <- lineage_content %>%\n  stringr::str_split(\"\\n\") %>%\n  unlist()\n\n# create a matrix from lineages_string_by_row with a second var \n# created from splitting by \"\\t\"\nlineages_mat <- lineages_string_by_row %>%\n  str_split(\"\\t\", simplify = TRUE)\n```\n:::\n\n\n\n\n<br>\n\nThis is what the first 5 rows of the matrix will look like:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(lineages_mat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{.watch}\n     [,1]     \n[1,] \"Lineage\"\n[2,] \"A\"      \n[3,] \"A.1\"    \n[4,] \"A.2\"    \n[5,] \"A.2.2\"  \n[6,] \"A.2.3\"  \n     [,2]                                                                                                                                                                                                                                  \n[1,] \"Description \"                                                                                                                                                                                                                        \n[2,] \"One of the two original haplotypes of the pandemic (A and B). Many sequences originating from China and many global exports; including to South East Asia Japan South Korea Australia the USA and Europe represented in this lineage\"\n[3,] \"USA lineage\"                                                                                                                                                                                                                         \n[4,] \"Mostly Spanish lineage now includes South and Central American sequences, other European countries and Kazakhstan.\"                                                                                                                  \n[5,] \"Australian lineage\"                                                                                                                                                                                                                  \n[6,] \"Scottish lineage\"                                                                                                                                                                                                                    \n```\n\n\n:::\n:::\n\n\n\n\n\n# Transform the dataframe\n\nNow we can define columns, filter, mutate and deduplicate the dataset\n\n1.    The columns for Lineage and Description still have bad names (v1 and v2). We'll rename them\n2.    `slice()` will remove the first row that contains variable names\n3.    We want to filter out any missing lineages - sometimes there are lineages without a description that won't be of use to us\n4.    Find lineages with withdrawn or active status and label them in a new column\n5.    Extract the part of the lineage that is useful\n6.    Sometimes lineages have a `*` symbol attached, remove this\n7.    Deduplicate any rows with a `distinct()` statement\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlineages_df <- lineages_mat %>%\n  as_tibble(.name_repair = \"unique\") %>%\n  \n  # Rename columns\n  rename(lineage_extracted = `...1`, description = `...2`) %>%\n  \n  # Remove the first row that contains variable names\n  slice(-1) %>%\n  \n  # Filter out missing lineages/descriptions\n  filter(!(lineage_extracted == \"\" & description == \"\")) %>%\n  \n  # create a 'status' var that is populated with either withdrawn or active\n  mutate(status = case_when(\n    # when 'withdrawn' is detected in the string then populate status with 'Withdrawn'\n    str_detect(tolower(description), \"withdrawn\") ~ \"Withdrawn\",\n    # otherwise populate status with 'Active'\n    TRUE ~ \"Active\"\n  )) %>%\n  \n  # extract string from beginning up until the first space or end of string \n  # and assign as lineage extracted. This steps is at times necessary due to errors\n  # in the file pulled. Within each row the lineage and descript should be separated\n  # by '\\t' (see line 53). However at times a white space is \n  # mistakenly entered instead \n  mutate(lineage_extracted = str_extract(\n    lineage_extracted,\n    \".+?(?=$|[[:SPACE:]])\"\n    )\n  ) %>%\n  \n  # remove '*' from the lineage_extracted variables. Often withdrawn lineages \n  # are denoted with a '*' at the beginning\n  mutate(lineage_extracted = str_remove_all(lineage_extracted, \"\\\\*\")) %>%\n  \n  # deduplicate any rows where lineage_extracted and status are the same \n  # (description is not a priority)\n  distinct(lineage_extracted, status, .keep_all = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNew names:\n• `` -> `...1`\n• `` -> `...2`\n```\n\n\n:::\n:::\n\n\n\n\n<br>\n\nLet's take a look at the result:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(lineages_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{.watch}\n# A tibble: 6 × 3\n  lineage_extracted description                                           status\n  <chr>             <chr>                                                 <chr> \n1 A                 One of the two original haplotypes of the pandemic (… Active\n2 A.1               USA lineage                                           Active\n3 A.2               Mostly Spanish lineage now includes South and Centra… Active\n4 A.2.2             Australian lineage                                    Active\n5 A.2.3             Scottish lineage                                      Active\n6 A.2.4             Panama lineage                                        Active\n```\n\n\n:::\n:::\n\n\n\n\n\n# Deduplicate\n\nNow we can deduplicate the whole dataframe. We'll find where lineages are duplicated and they have status = \"Active\"\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (any(duplicated(lineages_df$lineage_extracted))) {\n  \n  # identify all records where lineage_extracted is duplicated \n  dup_records <- lineages_df[lineages_df$lineage_extracted %in% lineages_df$lineage_extracted[duplicated(lineages_df$lineage_extracted)],]\n  \n  # identify records where status == \"Active\"\n  dup_records_active <- dup_records %>%\n    filter(status == \"Active\")\n  \n  # remove records where lineage_extract is duplicated but status = \"Active\" \n  # for final output\n  lineages_df_final <- anti_join(lineages_df, dup_records_active)\n  \n  # else if there no records with lineage_extracted is duplicated but status differs\n} else {\n  # lineages_df_6 is the final output\n  lineages_df_final <- lineages_df\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(lineage_extracted, description, status)`\n```\n\n\n:::\n:::\n\n\n\n\n\n# Review outputs\n\nHere's what the final dataframe should look like\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(lineages_df_final)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{.watch}\nRows: 4,204\nColumns: 3\n$ lineage_extracted <chr> \"A\", \"A.1\", \"A.2\", \"A.2.2\", \"A.2.3\", \"A.2.4\", \"A.2.5…\n$ description       <chr> \"One of the two original haplotypes of the pandemic …\n$ status            <chr> \"Active\", \"Active\", \"Active\", \"Active\", \"Active\", \"A…\n```\n\n\n:::\n:::\n\n\n\n\n# Write the file\n\nWrite the file to this repository\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreadr::write_csv(lineages_df_final, \"data/lineages.csv\", na = \"\")\n# save(lineages, file = paste0(\"data-raw/data_\", make.names(Sys.time()), \".Rda\"))\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}